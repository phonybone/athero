/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package org.systemsbiology.athero;

import com.amazonaws.services.simpleworkflow.flow.ActivitiesClientBase;
import com.amazonaws.services.simpleworkflow.flow.ActivitySchedulingOptions;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericActivityClient;
import com.amazonaws.services.simpleworkflow.model.ActivityType;

public class SimpleStoreActivitiesClientImpl extends ActivitiesClientBase implements SimpleStoreActivitiesClient {

	public SimpleStoreActivitiesClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public SimpleStoreActivitiesClientImpl(GenericActivityClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }
    
    public SimpleStoreActivitiesClientImpl(GenericActivityClient genericClient, 
            DataConverter dataConverter, ActivitySchedulingOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }
    
    @Override
    public final Promise<String> upload(String bucketName, String localName, String targetName) {
        return uploadImpl(Promise.asPromise(bucketName), Promise.asPromise(localName), Promise.asPromise(targetName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> upload(String bucketName, String localName, String targetName, Promise<?>... waitFor) {
        return uploadImpl(Promise.asPromise(bucketName), Promise.asPromise(localName), Promise.asPromise(targetName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> upload(String bucketName, String localName, String targetName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return uploadImpl(Promise.asPromise(bucketName), Promise.asPromise(localName), Promise.asPromise(targetName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<String> upload(Promise<String> bucketName, Promise<String> localName, Promise<String> targetName) {
        return uploadImpl(bucketName, localName, targetName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> upload(Promise<String> bucketName, Promise<String> localName, Promise<String> targetName, Promise<?>... waitFor) {
        return uploadImpl(bucketName, localName, targetName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> upload(Promise<String> bucketName, Promise<String> localName, Promise<String> targetName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return uploadImpl(bucketName, localName, targetName, optionsOverride, waitFor);
    }
    
    @com.amazonaws.services.simpleworkflow.flow.annotations.ExponentialRetry(
initialRetryIntervalSeconds=10
, maximumAttempts=10)

    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> uploadImpl(final Promise<String> bucketName, final Promise<String> localName, final Promise<String> targetName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("S3Upload");
		activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = bucketName;
        _input_[1] = localName;
        _input_[2] = targetName;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<String> download(String bucketName, String remoteName, String localName) {
        return downloadImpl(Promise.asPromise(bucketName), Promise.asPromise(remoteName), Promise.asPromise(localName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> download(String bucketName, String remoteName, String localName, Promise<?>... waitFor) {
        return downloadImpl(Promise.asPromise(bucketName), Promise.asPromise(remoteName), Promise.asPromise(localName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> download(String bucketName, String remoteName, String localName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return downloadImpl(Promise.asPromise(bucketName), Promise.asPromise(remoteName), Promise.asPromise(localName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<String> download(Promise<String> bucketName, Promise<String> remoteName, Promise<String> localName) {
        return downloadImpl(bucketName, remoteName, localName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<String> download(Promise<String> bucketName, Promise<String> remoteName, Promise<String> localName, Promise<?>... waitFor) {
        return downloadImpl(bucketName, remoteName, localName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<String> download(Promise<String> bucketName, Promise<String> remoteName, Promise<String> localName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return downloadImpl(bucketName, remoteName, localName, optionsOverride, waitFor);
    }
    
    @com.amazonaws.services.simpleworkflow.flow.annotations.ExponentialRetry(
initialRetryIntervalSeconds=10
, maximumAttempts=10)

    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<String> downloadImpl(final Promise<String> bucketName, final Promise<String> remoteName, final Promise<String> localName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("S3Download");
		activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[3];
        _input_[0] = bucketName;
        _input_[1] = remoteName;
        _input_[2] = localName;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, String.class, waitFor);
    }

    @Override
    public final Promise<Void> deleteLocalFile(String fileName) {
        return deleteLocalFileImpl(Promise.asPromise(fileName), (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLocalFile(String fileName, Promise<?>... waitFor) {
        return deleteLocalFileImpl(Promise.asPromise(fileName), (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLocalFile(String fileName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLocalFileImpl(Promise.asPromise(fileName), optionsOverride, waitFor);
    }

    @Override
    public final Promise<Void> deleteLocalFile(Promise<String> fileName) {
        return deleteLocalFileImpl(fileName, (ActivitySchedulingOptions)null);
    }

    @Override
    public final Promise<Void> deleteLocalFile(Promise<String> fileName, Promise<?>... waitFor) {
        return deleteLocalFileImpl(fileName, (ActivitySchedulingOptions)null, waitFor);
    }

    @Override
    public final Promise<Void> deleteLocalFile(Promise<String> fileName, ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {
        return deleteLocalFileImpl(fileName, optionsOverride, waitFor);
    }
    
    @com.amazonaws.services.simpleworkflow.flow.annotations.ExponentialRetry(
initialRetryIntervalSeconds=10)

    @SuppressWarnings({ "unchecked", "rawtypes" })
    protected Promise<Void> deleteLocalFileImpl(final Promise<String> fileName, final ActivitySchedulingOptions optionsOverride, Promise<?>... waitFor) {

        ActivityType activityType = new ActivityType();
		activityType.setName("DeleteLocalFile");
		activityType.setVersion("1.0");

        Promise[] _input_ = new Promise[1];
        _input_[0] = fileName;

        return (Promise)scheduleActivity(activityType, _input_, optionsOverride, Void.class, waitFor);
    }

}