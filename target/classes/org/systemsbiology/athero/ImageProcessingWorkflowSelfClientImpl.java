/*
 * This code was generated by AWS Flow Framework Annotation Processor.
 * Refer to Amazon Simple Workflow Service documentation at http://aws.amazon.com/documentation/swf 
 *
 * Any changes made directly to this file will be lost when 
 * the code is regenerated.
 */
 package org.systemsbiology.athero;

import com.amazonaws.services.simpleworkflow.flow.core.AndPromise;
import com.amazonaws.services.simpleworkflow.flow.core.Promise;
import com.amazonaws.services.simpleworkflow.flow.core.Task;
import com.amazonaws.services.simpleworkflow.flow.DataConverter;
import com.amazonaws.services.simpleworkflow.flow.StartWorkflowOptions;
import com.amazonaws.services.simpleworkflow.flow.WorkflowSelfClientBase;
import com.amazonaws.services.simpleworkflow.flow.generic.ContinueAsNewWorkflowExecutionParameters;
import com.amazonaws.services.simpleworkflow.flow.generic.GenericWorkflowClient;

public class ImageProcessingWorkflowSelfClientImpl extends WorkflowSelfClientBase implements ImageProcessingWorkflowSelfClient {

    public ImageProcessingWorkflowSelfClientImpl() {
        this(null, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public ImageProcessingWorkflowSelfClientImpl(GenericWorkflowClient genericClient) {
        this(genericClient, new com.amazonaws.services.simpleworkflow.flow.JsonDataConverter(), null);
    }

    public ImageProcessingWorkflowSelfClientImpl(GenericWorkflowClient genericClient, 
            DataConverter dataConverter, StartWorkflowOptions schedulingOptions) {
            
        super(genericClient, dataConverter, schedulingOptions);
    }

    @Override
    public final void processImage(String sourceBucketName, String sourceFilename, String targetBucketName, org.systemsbiology.athero.ImageProcessingOption option) { 
        processImageImpl(Promise.asPromise(sourceBucketName), Promise.asPromise(sourceFilename), Promise.asPromise(targetBucketName), Promise.asPromise(option), (StartWorkflowOptions)null);
    }

    @Override
    public final void processImage(String sourceBucketName, String sourceFilename, String targetBucketName, org.systemsbiology.athero.ImageProcessingOption option, Promise<?>... waitFor) { 
        processImageImpl(Promise.asPromise(sourceBucketName), Promise.asPromise(sourceFilename), Promise.asPromise(targetBucketName), Promise.asPromise(option), (StartWorkflowOptions)null, waitFor);
    }
    
    @Override
    public final void processImage(String sourceBucketName, String sourceFilename, String targetBucketName, org.systemsbiology.athero.ImageProcessingOption option, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        processImageImpl(Promise.asPromise(sourceBucketName), Promise.asPromise(sourceFilename), Promise.asPromise(targetBucketName), Promise.asPromise(option), optionsOverride, waitFor);
    }
    
    @Override
    public final void processImage(Promise<String> sourceBucketName, Promise<String> sourceFilename, Promise<String> targetBucketName, Promise<org.systemsbiology.athero.ImageProcessingOption> option) {
        processImageImpl(sourceBucketName, sourceFilename, targetBucketName, option, (StartWorkflowOptions)null);
    }

    @Override
    public final void processImage(Promise<String> sourceBucketName, Promise<String> sourceFilename, Promise<String> targetBucketName, Promise<org.systemsbiology.athero.ImageProcessingOption> option, Promise<?>... waitFor) {
        processImageImpl(sourceBucketName, sourceFilename, targetBucketName, option, (StartWorkflowOptions)null, waitFor);
    }

    @Override
    public final void processImage(Promise<String> sourceBucketName, Promise<String> sourceFilename, Promise<String> targetBucketName, Promise<org.systemsbiology.athero.ImageProcessingOption> option, StartWorkflowOptions optionsOverride, Promise<?>... waitFor) {
        processImageImpl(sourceBucketName, sourceFilename, targetBucketName, option, optionsOverride, waitFor);
    }
    
    protected void processImageImpl(final Promise<String> sourceBucketName, final Promise<String> sourceFilename, final Promise<String> targetBucketName, final Promise<org.systemsbiology.athero.ImageProcessingOption> option, final StartWorkflowOptions schedulingOptionsOverride, Promise<?>... waitFor) {
        new Task(new Promise[] { sourceBucketName, sourceFilename, targetBucketName, option, new AndPromise(waitFor) }) {
    		@Override
			protected void doExecute() throws Throwable {
                ContinueAsNewWorkflowExecutionParameters _parameters_ = new ContinueAsNewWorkflowExecutionParameters();
                Object[] _input_ = new Object[4];
                _input_[0] = sourceBucketName.get();
                _input_[1] = sourceFilename.get();
                _input_[2] = targetBucketName.get();
                _input_[3] = option.get();
                String _stringInput_ = dataConverter.toData(_input_);
				_parameters_.setInput(_stringInput_);
				_parameters_ = _parameters_.createContinueAsNewParametersFromOptions(schedulingOptions, schedulingOptionsOverride);
                
                if (genericClient == null) {
                    genericClient = decisionContextProvider.getDecisionContext().getWorkflowClient();
                }
                genericClient.continueAsNewOnCompletion(_parameters_);
			}
		};
    }
}